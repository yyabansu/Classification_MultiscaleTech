# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['LRClassifier']

# Cell
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split, cross_val_predict, StratifiedKFold
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.metrics import confusion_matrix, classification_report

class LRClassifier(object):

    # Initial Logistic Regression Function with parameters given: penalty, solver, CV, K (kfold - StartifiedKFold)
    def __init__(self, X, Y, penalty = 'l2', solver = 'lbfgs', max_iter = 100, CV = 'kfold', K = None):

        self.Y = Y
        self.X = X

        self.LR = LogisticRegression(random_state = 0, penalty = penalty, solver = solver, max_iter = max_iter)
        self.LR.fit(X, Y)
        self.Yh = self.LR.predict(X)

        # Cross-Validated predictions for all of the data points using StratifiedKFold method
        if CV.lower() == 'kfold':
            if K == None:
                K = 2

            kf = StratifiedKFold(n_splits = K, shuffle = True)
            self.YhCV = cross_val_predict(self.LR, X, Y, cv = kf)

    def get_values(self):

        return (self.Yh, self.YhCV)

    # Train-Test split and predictions on the Train and Test set
    def train_test_predict(self, X, Y, K = None):

        if K == None:
            K = 0.2

        Xtrain, Xtest, Ytrain, self.Ytest = train_test_split(X, Y, test_size = K, shuffle = True)

        self.LR.fit(Xtrain, Ytrain)
        self.YhTrain = self.LR.predict(Xtrain)
        self.YhTest = self.LR.predict(Xtest)

        return (self.YhTrain, self.YhTest, self.Ytest)

    # Show error metrics (Classification Report and Confusion Matrix) for the data - Test and CV
    def show_error(self, target_names = None):

        # Classification metrics that give out precision, recall, f1-score for each class and the confucion matrix
        cr = classification_report(self.Ytest, self.YhTest, target_names = target_names)
        print('Classification Report: \n', cr)
        cm = confusion_matrix(self.Ytest, self.YhTest)
        print('Confusion Matrix: \n', cm)

        # Classification metrics that give out precision, recall, f1-score for each class and the confucion matrix
        cr1 = classification_report(self.Y, self.YhCV, target_names = target_names)
        print('\n Classification Report CV: \n', cr1)
        cm1 = confusion_matrix(self.Y, self.YhCV)
        print('Confusion Matrix CV: \n', cm1)